use std

ListPhantomMember ListPhantomMember() return new ListPhantomMember()
ListPhantomMember ListPhantomMember(PhantomMember v1) return _chain_add(ListPhantomMember(), v1)
ListPhantomMember ListPhantomMember(PhantomMember v1, PhantomMember v2) return _chain_add(ListPhantomMember(v1), v2)
ListPhantomMember ListPhantomMember(PhantomMember v1, PhantomMember v2, PhantomMember v3) return _chain_add(ListPhantomMember(v1, v2), v3)
ListPhantomMember ListPhantomMember(PhantomMember v1, PhantomMember v2, PhantomMember v3, PhantomMember v4) return _chain_add(ListPhantomMember(v1, v2, v3), v4)
ListPhantomMember ListPhantomMember(PhantomMember v1, PhantomMember v2, PhantomMember v3, PhantomMember v4, PhantomMember v5) return _chain_add(ListPhantomMember(v1, v2, v3, v4), v5)
ListPhantomMember ListPhantomMember(PhantomMember v1, PhantomMember v2, PhantomMember v3, PhantomMember v4, PhantomMember v5, PhantomMember v6) return _chain_add(ListPhantomMember(v1, v2, v3, v4, v5), v6)
ListPhantomMember ListPhantomMember(PhantomMember v1, PhantomMember v2, PhantomMember v3, PhantomMember v4, PhantomMember v5, PhantomMember v6, PhantomMember v7) return _chain_add(ListPhantomMember(v1, v2, v3, v4, v5, v6), v7)
ListPhantomMember ListPhantomMember(PhantomMember v1, PhantomMember v2, PhantomMember v3, PhantomMember v4, PhantomMember v5, PhantomMember v6, PhantomMember v7, PhantomMember v8) return _chain_add(ListPhantomMember(v1, v2, v3, v4, v5, v6, v7), v8)

ListPhantomMember _chain_add(ListPhantomMember instance, PhantomMember value)
{
	instance.add(value)
	return instance
}

class PhantomMemberPredicate
{
	bool matches(PhantomMember instance) {
		return false
	}
}

class ListPhantomMember
{
	string _to_string_PhantomMember(PhantomMember other) return other.to_string()
	bool _equals_PhantomMember(PhantomMember left, PhantomMember right) return left.equals(right)
	
	_ListPhantomMemberNode _root
	_ListPhantomMemberNode _tail
	
	ctor() {
		_root = new _ListPhantomMemberNode()
		_tail = _root
	}
	
	number length() {
		number count = 0
		
		ListPhantomMemberEnumerator enumerator = enumerate()
		while enumerator.has_next() {
			count++
		}
		
		return count
	}
	
	bool has_any() {
		return _root.has_value
	}

	add(PhantomMember value) {
		_tail.value(value)
		
		_ListPhantomMemberNode new_tail = new _ListPhantomMemberNode()
		new_tail.prev(_tail)
		_tail.next(new_tail)
		_tail = new_tail
	}
	
	removeAt(number index) {
		number i = 0
		
		if index == 0 {
			if !has_any() {
				@panic("ListPhantomMember.removeAt(number): attempted to remove element at position 0 when none exists")
			}
			
			_root = _root.safe_next()
			return
		}
		
		ListPhantomMemberEnumerator enumerator = enumerate()
		while @operator_and(i <= index, enumerator.has_next()) {
			if i == index {
				_ListPhantomMemberNode node = enumerator._current
				
				if @operator_and(node.has_prev, node.has_next) {
					// stitch previous node to refer to next node,
					// and next node to refer to previous node
					node.safe_prev().next(node.safe_next())
					node.safe_next().prev(node.safe_prev())
				}
				else if node.has_prev {
					// if it only has a previous, clear the previous node's next
					node.safe_prev().next()
				}
				else if node.has_next {
					// if it only has a next, clear the next node's previous
					node.safe_next().prev()
				}
				else {
					@panic("ListPhantomMember.removeAt(number): unsure how to remove node from chain. has neither prev nor next.")
					return
				}
				
				return
			}
			i++
		}
		i--
		
		@panic("ListPhantomMember.removeAt(number): unable to remove element at index {to_string(index)} (enumerated up until {to_string(i)})")
	}
	
	clear() {
		ctor()
	}
	
	string to_string() {
		string total = "["
		
		bool has_enumerated = false
		ListPhantomMemberEnumerator enumerator = enumerate()
		while enumerator.has_next() {
			if has_enumerated {
				total = "{total}, {_to_string_PhantomMember(enumerator.current)}"
			}
			else {
				total = "{total}{_to_string_PhantomMember(enumerator.current)}"
				has_enumerated = true
			}
		}
		
		return "{total}]"
	}
	
	bool equals(ListPhantomMember other) {
		ListPhantomMemberEnumerator enumerateThis = enumerate()
		ListPhantomMemberEnumerator enumerateThat = other.enumerate()
		
		do {
			bool thisNext = enumerateThis.has_next()
			bool thatNext = enumerateThat.has_next()
			
			if thisNext != thatNext return false
			
			// if there are no more items, quit
			// we've verified that the two are the same so we don't need to check both
			if !thisNext return true
			
			// they were both true so we can guarantee that there's an item
			if !_equals_PhantomMember(enumerateThis.current, enumerateThat.current) return false
		} while(true)
	}
	
	bool contains(PhantomMemberPredicate predicate) {
		return index_of(predicate) != -1
	}
	
	number index_of(PhantomMemberPredicate predicate) {
		number i = 0
		
		ListPhantomMemberEnumerator enumerator = enumerate()
		while enumerator.has_next() {
			if predicate.matches(enumerator.current) return i
			i++
		}
		
		return (-1)
	}
	
	PhantomMember at(number index) {
		number i = 0
		
		ListPhantomMemberEnumerator enumerator = enumerate()
		while @operator_and(i <= index, enumerator.has_next()) {
			if i == index return enumerator.current
			i++
		}
		i--
		
		@panic("PhantomMember ListPhantomMember.at(number): unable to find element at index {to_string(index)} (enumerated up until {to_string(i)})")
	}
	
	insert(number index, PhantomMember value) {
		number i = 0
		
		if index == 0 {
			_ListPhantomMemberNode new_root = new _ListPhantomMemberNode()
			new_root.value(value)
			new_root.next(_root)
			_root = new_root
			return
		}
		
		ListPhantomMemberEnumerator enumerator = enumerate()
		while @operator_and(i <= index, enumerator.has_next()) {
			if i == index {
				_ListPhantomMemberNode node = enumerator._current
				
				// set this node's previous entry to point to the next one
				// we handled the case where i is 0, so we know we must have a previous node
				_ListPhantomMemberNode inject = new _ListPhantomMemberNode()
				inject.value(value)
				inject.next(node)
				inject.prev(node.safe_prev())
				
				node.safe_prev().next(inject)
				
				return
			}
			i++
		}
		
		if i == index {
			// we're inserting at the end - aka, adding
			add(value)
			return
		}
		
		i--
		
		@panic("ListPhantomMember.insert(number, PhantomMember): unable to insert element at index {to_string(index)} (enumerated up until {to_string(i)})")
	}
	
	ListPhantomMemberEnumerator enumerate() {
		return new ListPhantomMemberEnumerator(_root)
	}
	
	_debug_print_structure() {
		@println("_root: ")
		_root._debug_print_structure("  ")
	}
}

// ListPhantomMemberEnumerator enumerator = list.enumerate()
// while enumerator.has_next() {
//     PhantomMember next = enumerator.current
// }

class ListPhantomMemberEnumerator
{
	PhantomMember current
	
	bool _has_enumerated
	_ListPhantomMemberNode _current

	ctor(_ListPhantomMemberNode node_current) {
		_has_enumerated = false
		_current = node_current
	}

	bool has_next() {
		if !_has_enumerated {
			if _current.has_value {
				current = _current.safe_value()
				
				_has_enumerated = true
				return true
			}
			
			return false
		}
		
		if _current.has_next {
			_current = _current.safe_next()
			
			if _current.has_value {
				current = _current.safe_value()
				return true
			}
		}
		
		return false
	}
}

class _ListPhantomMemberNode
{
	bool has_value
	PhantomMember value
	
	bool has_next
	_ListPhantomMemberNode next
	
	bool has_prev
	_ListPhantomMemberNode prev
	
	ctor() {
		has_value = false
		has_next = false
		has_prev = false
	}
	
	PhantomMember safe_value() {
		if !has_value {
			@panic("PhantomMember _ListPhantomMemberNode.safe_value(): attempted to take value when no value present")
		}
		
		return value
	}
	
	_ListPhantomMemberNode safe_next() {
		if !has_next {
			@panic("_ListPhantomMemberNode _ListPhantomMemberNode.safe_next(): attempted to take next when no next present")
		}
		
		return next
	}
	
	_ListPhantomMemberNode safe_prev() {
		if !has_prev {
			@panic("_ListPhantomMemberNode _ListPhantomMemberNode.safe_prev(): attempted to take prev when no prev present")
		}
		
		return prev
	}
	
	value() {
		has_value = false
	}
	
	value(PhantomMember new_value) {
		has_value = true
		value = new_value
	}
	
	next() {
		has_next = false
	}
	
	next(_ListPhantomMemberNode new_next) {
		has_next = true
		next = new_next
	}
	
	prev() {
		has_prev = false
	}
	
	prev(_ListPhantomMemberNode new_prev) {
		has_prev = true
		prev = new_prev
	}
	
	_debug_print_structure(string tab) {
		@println("{tab}- has_value: {to_string(has_value)}")
		if has_value {
			@println("{tab}  {new ListPhantomMember()._to_string_PhantomMember(value)}")
		}
		
		@println("{tab}- has_prev: {to_string(has_prev)}")
		
		@println("{tab}- has_next: {to_string(has_next)}")
		if has_next {
			next._debug_print_structure("{tab}  ")
		}
	}
}