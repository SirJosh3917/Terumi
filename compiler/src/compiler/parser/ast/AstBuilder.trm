use compiler.lexer
use compiler.parser
use compiler.parser.statements

// TODO: implement
class Ast
{
	ListUsePackage use_packages
	
	bool has_declaration
	DeclarePackage declaration
	
	ListFunction functions
	ListClass classes
	ListContract contracts
	
	ctor() {
	}
}

// TODO: implement
class UsePackage
{
	ctor() {
	}
	
	bool equals(UsePackage other) {
		return true
	}
	
	string to_string() {
		return "string UsePackage.to_string(): not implemented"
	}
}

// TODO: implement
class DeclarePackage
{
	ctor() {
	}
	
	bool equals(DeclarePackage other) {
		return true
	}
	
	string to_string() {
		return "string DeclarePackage.to_string(): not implemented"
	}
}

class Field
{
	bool is_readonly
	ParsedType parsed_type
	
	bool is_private() return parsed_type.name.source.starts_with("_")
	
	ctor(bool param_is_readonly, ParsedType param_parsed_type) {
		is_readonly = param_is_readonly
		parsed_type = param_parsed_type
	}
	
	bool equals(Field other) {
		return @operator_and(
			is_readonly == other.is_readonly,
			parsed_type.equals(other.parsed_type)
		)
	}
}

class Function
{
	FunctionHeader header
	Statement body
	
	ctor(FunctionHeader param_header, Statement param_body) {
		header = param_header
		body = param_body
	}
	
	bool equals(Function other) {
		return @operator_and(
			header.equals(other.header),
			body.equals(other.body)
		)
	}
	
	string to_string() {
		return "string Function.to_string(): not implemented"
	}
}

class Member
{
	number _type
	Field _field
	Function _function
	
	ctor(Field field) {
		_type = 1
		_field = field
	}
	
	ctor(Function function) {
		_type = 2
		_function = function
	}
	
	bool is_field() return _type == 1
	bool is_function() return _type == 2
	
	Field unwrap_field() {
		if (!is_field()) @panic("Field Member.unwrap_field(): attempt to unwrap a field that is not a field.")
		return _field
	}
	
	Function unwrap_function() {
		if (!is_function()) @panic("Function Member.unwrap_function(): attempt to unwrap a function that is not a function.")
		return _function
	}
	
	bool equals(Member other) {
		if _type != other._type return false
		
		if is_field() {
			return unwrap_field().equals(other.unwrap_field())
		}
		
		if is_function() {
			return unwrap_function().equals(other.unwrap_function())
		}
		
		@panic("bool Member.equals(Member): unsupported path")
	}
	
	string to_string() {
		return "string Member.to_string(): unimplemented path"
	}
}

class Class
{
	Token name
	LinkedParsedTypeList generics
	ListMember members
	
	ctor(Token param_name, LinkedParsedTypeList param_generics, ListMember param_members) {
		name = param_name
		generics = param_generics
		members = param_members
	}
	
	bool equals(Class other) {
		return @operator_and(
			@operator_and(
				name.equals(other.name),
				generics.equals(other.generics)
			),
			members.equals(other.members)
		)
	}
	
	string to_string() {
		return "string Class.to_string(): not implemented"
	}
}

class FunctionHeader
{
	FunctionMeta meta
	// list of parameters
	
	ctor(FunctionMeta param_meta) {
		meta = param_meta
	}
	
	bool equals(FunctionHeader other) {
		return meta.equals(other.meta)
	}
}

class PhantomMember
{
	number _type
	Field _field
	FunctionHeader _function_header
	
	ctor(Field field) {
		_type = 1
		_field = field
	}
	
	ctor(FunctionHeader function_header) {
		_type = 2
		_function_header = function_header
	}
	
	bool is_field() return _type == 1
	bool is_function_header() return _type == 2
	
	Field unwrap_field() {
		if (!is_field()) @panic("Field Member.unwrap_field(): attempt to unwrap a field that is not a field.")
		return _field
	}
	
	FunctionHeader unwrap_function_header() {
		if (!is_function_header()) @panic("FunctionHeader Member.unwrap_function(): attempt to unwrap a function header that is not a function header.")
		return _function_header
	}
	
	bool equals(PhantomMember other) {
		if _type != other._type return false
		
		if is_field() {
			return unwrap_field().equals(other.unwrap_field())
		}
		
		if is_function_header() {
			return unwrap_function_header().equals(other.unwrap_function_header())
		}
		
		@panic("bool PhantomMember.equals(PhantomMember): non supported path")
	}
	
	string to_string() {
		return "string PhantomMember.to_string(): not implemented"
	}
}

class Contract
{
	Token name
	LinkedParsedTypeList generics
	ListPhantomMember members
	
	ctor(Token param_name, LinkedParsedTypeList param_generics, ListPhantomMember param_members) {
		name = param_name
		generics = param_generics
		members = param_members
	}
	
	bool equals(Contract other) {
		return @operator_and(
			@operator_and(
				name.equals(other.name),
				generics.equals(other.generics)
			),
			members.equals(other.members)
		)
	}
	
	string to_string() {
		return "string Contract.to_string(): not implemented"
	}
}