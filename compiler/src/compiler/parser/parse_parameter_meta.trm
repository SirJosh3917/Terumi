use std
use compiler
use compiler.lexer

/**
 * This will parse exactly one parameter of a method, and start on the next parameter.
 */
ParseParameterMetaResult parse_parameter_meta(ContractLexer lexer)
{
	ParseTypeResult parameter_type = parse_type(lexer)
	
	if (!parameter_type.success) {
		return new ParseParameterMetaResult()
	}
	
	Token name = lexer_next_significant(lexer)
	
	if (!name.is_identifier()) {
		return new ParseParameterMetaResult()
	}
	
	Token end = lexer_next_significant(lexer)
	
	if (@operator_and(@operator_not(end.is_special(",")), @operator_not(end.is_special(")")))) {
		return new ParseParameterMetaResult()
	}
	
	return new ParseParameterMetaResult(parameter_type.data, name, end)
}

class ParseParameterMetaResult
{
	bool success
	ParameterMeta parameter_meta
	bool should_be_more
	
	// COMPAT
	ParsedType type
	Token name
	Token end

	ctor(ParsedType param_type, Token param_name, Token param_end) {
		success = true
		should_be_more = param_end.is_special(",")
		parameter_meta = new ParameterMeta(
			param_type,
			param_name,
			param_end
		)
		type = param_type
		name = param_name
		end = param_end
	}
	
	ctor() {
		success = false
		should_be_more = false
	}
}

class ParameterMeta
{
	ParsedType type
	Token name
	Token end

	ctor(ParsedType param_type, Token param_name, Token param_end) {
		type = param_type
		name = param_name
		end = param_end
	}
	
	ctor() {
	}
	
	bool equals(ParameterMeta other) {
		return @operator_and(
			@operator_and(
				type.equals(other.type),
				name.equals(other.name)
			),
			end.equals(other.end)
		)
	}
	
	string to_string() {
		return "string ParameterMeta.to_string(): not implemented"
	}
}