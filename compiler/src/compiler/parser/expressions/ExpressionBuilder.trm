// This file is dedicated towards a simple to use pattern taht results in easy
// to construct expression trees.

use compiler

/**
 * Currently, a giant hack of a class that gets around the fact that
 * polymorphism doesn't exist.
 */
class Expression
{
	/**
	 * Internal number to determine the type of an expression. Used as a
	 * workaround for not having polymorphism.
	 */
	number expression_type
	
	/**
	 * Used for storing data, serves various purposes.
	 * When this Expression is a | This Stores
	 * IdentifierExpression: the identifier
	 * NumberExpression: the number
	 */
	Text text_one
	
	/**
	 * Used for storing data, serves various purposes.
	 * When this Expression is a | This Stores
	 * ParentheticalExpression: the inner expression
	 */
	Expression expression_one
	
	/**
	 * Used for storing data, serves various purposes.
	 * When this Expression is a | This Stores
	 * AdditionExpression: the right hand side
	 */
	Expression expression_two
	
	ctor(Text text, bool is_number) {
		expression_type = 1
		text_one = text
		
		if (is_number) {
			expression_type = 4
		}
	}
	
	ctor(Expression left, Expression right) {
		expression_type = 2
		expression_one = left
		expression_two = right
	}
	
	ctor(Expression expression, number circumstance) {
		expression_type = 3
		expression_one = expression
		
		if (circumstance == 2) {
			expression_type = 5
		}
	}

	bool equals(Expression other) {
		if (other.expression_type != expression_type) {
			return false
		}
		
		if (@operator_or(expression_type == 1, expression_type == 4)) {
			// we want to compare the *value* of the text, not necessarily just
			// the position of the text
			
			return text_one.to_string() == other.text_one.to_string()
		}
		
		if (expression_type == 2) {
		
			bool lefts_equal = expression_one.equals(other.expression_one)
			bool rights_equal = expression_two.equals(other.expression_two)
			return @operator_and(lefts_equal, rights_equal)
		}
		
		if (@operator_or(expression_type == 3, expression_type == 5)) {
			return expression_one.equals(other.expression_one)
		}
		
		@panic("shouldn't be possible")
	}
}

Expression identifier(string identifier) return identifier(new Text(identifier))
Expression identifier(Text identifier) return new Expression(identifier, false)

Expression numerical(number value) return numerical(new Text("{to_string(value)}"))
Expression numerical(Text numerical_text) return new Expression(numerical_text, true)

Expression addition(Expression left, Expression right) return new Expression(left, right)
Expression parenthetical(Expression expression) return new Expression(expression, 1)

Expression negate(Expression expression) return new Expression(expression, 2)