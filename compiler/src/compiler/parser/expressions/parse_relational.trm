use std
use compiler
use compiler.lexer
use compiler.parser
use compiler.parser.expressions

ParseExpressionResult parse_relational(ContractLexer lexer)
{
	ParseExpressionResult left = parse_relational_next(lexer)
	
	if (!left.success) {
		return new ParseExpressionResult()
	}
	
	LexerPosition position = lexer.save()
	return parse_relational_right(lexer, position, left.expression)
}

// recursion is used as hacky workaround given that reassigning variables seems
// to cause some kind of weird bug
ParseExpressionResult parse_relational_right(ContractLexer lexer, LexerPosition position, Expression left)
{
	Token middle = lexer_next_significant(lexer)
	
	if (!@operator_or(@operator_or(middle.is_special(">"), middle.is_special("<")), @operator_or(middle.is_special(">="), middle.is_special("<=")))) {
		lexer.load(position)
		return new ParseExpressionResult(left)
	}
	
	ParseExpressionResult right = parse_relational_next(lexer)
	
	if (!right.success) {
		lexer.load(position)
		return new ParseExpressionResult(left)
	}
	
	if (middle.is_special(">")) {
		return parse_relational_right(lexer, lexer.save(), greater_than(left, right.expression))
	}
	
	if (middle.is_special("<")) {
		return parse_relational_right(lexer, lexer.save(), less_than(left, right.expression)))
	}
	
	if (middle.is_special(">=")) {
		return parse_relational_right(lexer, lexer.save(), greater_than_or_equal_to(left, right.expression)))
	}
	
	if (middle.is_special("<=")) {
		return parse_relational_right(lexer, lexer.save(), less_than_or_equal_to(left, right.expression)))
	}
	
	@panic("ParseExpressionResult parse_relational_right(ContractLexer, LexerPosition, Expression): impossible path taken")
}