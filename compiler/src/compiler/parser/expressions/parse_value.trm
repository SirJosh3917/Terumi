use std
use compiler
use compiler.lexer
use compiler.parser
use compiler.parser.expressions

ParseExpressionResult parse_value(ContractLexer lexer)
{
	LexerPosition position = lexer.save()
	Token token = lexer_next_significant(lexer)
	
	if (token.is_number()) {
		return new ParseExpressionResult(numerical(token.source))
	}
	
	if (token.is_string()) {
		return new ParseExpressionResult(string(token.source))
	}
	
	if (token.is_identifier()) {
		LexerPosition parsed_token = lexer.save()
		
		lexer.load(position)
		ParseExpressionResult function_call_result = parse_function_call(lexer)
		
		if (function_call_result.success) {
			return new ParseExpressionResult(function_call_result.expression)
		}
		
		lexer.load(parsed_token)
		
		return new ParseExpressionResult(identifier(token.source))
	}

	lexer.load(position)
	return parse_value_next(lexer)
}
