class LinkedParsedTypeList
{
	LinkedParsedTypeNode _tail
	LinkedParsedTypeNode _head

	ctor() {
		_tail = new LinkedParsedTypeNode()
		_head = _tail
	}
	
	add(ParsedType element) {
		_head.value = element
		
		LinkedParsedTypeNode new_head = new LinkedParsedTypeNode()
		new_head.set_previous(_head)
		_head.set_next(new_head)
		
		_head = new_head
	}
	
	bool has_any() return _tail.has_next
}

class LinkedParsedTypeNode
{
	ParsedType value
	
	bool has_previous
	LinkedParsedTypeNode previous
	
	bool has_next
	LinkedParsedTypeNode next
	
	set_next() has_next = false
	set_next(LinkedParsedTypeNode node) {
		has_next = true
		next = node
	}
	
	set_previous() has_previous = false
	set_previous(LinkedParsedTypeNode node) {
		has_previous = true
		previous = node
	}
	
	ctor() {
		has_previous = false
		has_next = false
	}
}