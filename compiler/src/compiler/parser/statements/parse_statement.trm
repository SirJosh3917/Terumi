use std
use compiler
use compiler.lexer
use compiler.parser.expressions

class ParseStatementResult
{
	bool success
	Statement statement

	ctor() {
		success = false
		
		// debug hacky workaround to prevent fields from giving exceptions
		statement = statement_return(numerical(1))
	}
	
	ctor(Statement param_statement) {
		success = true
		statement = param_statement
	}
}

/**
 * This will parse exactly one statement of a method. A body of statements counts as a statement.
 */
ParseStatementResult parse_statement(ContractLexer lexer)
{
	LexerPosition position = lexer.save()
	
	ParseStatementResult result = parse_statement_body(lexer)
	if result.success {
		return result
	}
	
	lexer.load(position)
	result = parse_statement_if(lexer)
	if result.success {
		return result
	}
	
	lexer.load(position)
	result = parse_statement_for(lexer)
	if result.success {
		return result
	}
	
	lexer.load(position)
	result = parse_statement_while(lexer)
	if result.success {
		return result
	}
	
	lexer.load(position)
	result = parse_statement_do_while(lexer)
	if result.success {
		return result
	}
	
	lexer.load(position)
	result = parse_statement_return(lexer)
	if result.success {
		return result
	}
	
	return new ParseStatementResult()
}

ParseStatementResult parse_statement_body(ContractLexer lexer)
{
	return new ParseStatementResult()
}

ParseStatementResult parse_statement_if(ContractLexer lexer)
{
	Token token = lexer_next_significant(lexer)
	
	if !token.is_identifier("if") {
		return new ParseStatementResult()
	}
	
	ParseExpressionResult expression_result = parse_expression(lexer)
	
	if !expression_result.success {
		return new ParseStatementResult()
	}
	
	ParseStatementResult statement_result = parse_statement(lexer)
	
	if !statement_result.success {
		return new ParseStatementResult()
	}
	
	LexerPosition position = lexer.save()
	
	if lexer_next_significant(lexer).is_identifier("else") {
		ParseStatementResult statement_result_else = parse_statement(lexer)
		
		if !statement_result_else.success {
			return new ParseStatementResult()
		}
		
		return new ParseStatementResult(statement_if_else(expression_result.expression, statement_result.statement, statement_result_else.statement))
	}
	
	lexer.load(position)
	
	return new ParseStatementResult(statement_if(expression_result.expression, statement_result.statement))
}

ParseStatementResult parse_statement_for(ContractLexer lexer)
{
	// TODO: support hip syntax:
	// for i, entry in list {
	//     // ...
	// }
	// for now we only support C style for loops for compatibility with old compiler

	Token token = lexer_next_significant(lexer)
	if !token.is_identifier("for") {
		return new ParseStatementResult()
	}
	
	Token open_parenthesis = lexer_next_significant(lexer)
	if !open_parenthesis.is_special("(") {
		return new ParseStatementResult()
	}
	
	ParseStatementResult initialization_statement_result = parse_statement(lexer)
	if !initialization_statement_result.success {
		return new ParseStatementResult()
	}
	
	Token semicolon_one = lexer_next_significant(lexer)
	if !semicolon_one.is_special(";") {
		return new ParseStatementResult()
	}
	
	ParseExpressionResult condition_expression_result = parse_expression(lexer)
	if !condition_expression_result.success {
		return new ParseStatementResult()
	}
	
	Token semicolon_two = lexer_next_significant(lexer)
	if !semicolon_two.is_special(";") {
		return new ParseStatementResult()
	}
	
	ParseStatementResult increment_statement_result = parse_statement(lexer)
	if !increment_statement_result.success {
		return new ParseStatementResult()
	}
	
	Token close_parenthesis = lexer_next_significant(lexer)
	if !close_parenthesis.is_special(")") {
		return new ParseStatementResult()
	}
	
	ParseStatementResult body_statement_result = parse_statement(lexer)
	if !body_statement_result.success {
		return new ParseStatementResult()
	}
	
	return new ParseStatementResult(statement_for(initialization_statement_result.statement, condition_expression_result.expression, increment_statement_result.statement, body_statement_result.statement))
}

ParseStatementResult parse_statement_while(ContractLexer lexer)
{
	Token token = lexer_next_significant(lexer)
	
	if !token.is_identifier("while") {
		return new ParseStatementResult()
	}
	
	ParseExpressionResult condition_expression_result = parse_expression(lexer)
	if !condition_expression_result.success {
		return new ParseStatementResult()
	}
	
	ParseStatementResult body_statement_result = parse_statement(lexer)
	if !body_statement_result.success {
		return new ParseStatementResult()
	}
	
	return new ParseStatementResult(statement_while(condition_expression_result.expression, body_statement_result.statement))
}

ParseStatementResult parse_statement_do_while(ContractLexer lexer)
{
	Token token = lexer_next_significant(lexer)
	
	if !token.is_identifier("do") {
		return new ParseStatementResult()
	}
	
	ParseStatementResult body_statement_result = parse_statement(lexer)
	if !body_statement_result.success {
		return new ParseStatementResult()
	}
	
	Token while_token = lexer_next_significant(lexer)
	if !while_token.is_identifier("while") {
		return new ParseStatementResult()
	}
	
	ParseExpressionResult condition_expression_result = parse_expression(lexer)
	if !condition_expression_result.success {
		return new ParseStatementResult()
	}
	
	return new ParseStatementResult(statement_do_while(body_statement_result.statement, condition_expression_result.expression))
}

ParseStatementResult parse_statement_return(ContractLexer lexer)
{
	Token token = lexer_next_significant(lexer)
	
	if !token.is_identifier("return") {
		return new ParseStatementResult()
	}
	
	ParseExpressionResult expression_result = parse_expression(lexer)
	
	if !expression_result.success {
		return new ParseExpressionResult()
	}
	
	return new ParseStatementResult(statement_return(expression_result.expression))
}