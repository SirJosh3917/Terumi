class LinkedStatementList
{
	LinkedStatementNode _tail
	LinkedStatementNode _head

	ctor() {
		_tail = new LinkedStatementNode()
		_head = _tail
	}
	
	add(Statement element) {
		_head.value = element
		
		LinkedStatementNode new_head = new LinkedStatementNode()
		new_head.set_previous(_head)
		_head.set_next(new_head)
		
		_head = new_head
	}
	
	bool has_any() return _tail.has_next
	
	string to_string() return "string LinkedStatementList.to_string(): not implemented"
	
	bool equals(LinkedStatementList other) return _tail.equals(other._tail)
}

class LinkedStatementNode
{
	Statement value
	
	bool has_previous
	LinkedStatementNode previous
	
	bool has_next
	LinkedStatementNode next
	
	set_next() has_next = false
	set_next(LinkedStatementNode node) {
		has_next = true
		next = node
	}
	
	set_previous() has_previous = false
	set_previous(LinkedStatementNode node) {
		has_previous = true
		previous = node
	}
	
	bool equals(LinkedStatementNode other) {
		if has_previous != other.has_previous return false
		if has_next != other.has_next return false
		
		if has_next {
			if !value.equals(other.value) return false
			if !next.equals(other.next) return false
		}
		
		// don't compare previous, we could end up in an infinite loop
		// we start from tail and go to the head
		// if has_previous {
		// 	if !previous.equals(other.previous) return false
		// }
		
		return true
	}
	
	bool has_another_generic() {
		if (has_next) {
			return next.has_next
		}
		
		return false
	}
	
	ctor() {
		has_previous = false
		has_next = false
	}
}