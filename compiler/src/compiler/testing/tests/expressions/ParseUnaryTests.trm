use std
use compiler.testing
use compiler.lexer
use compiler.parser.expressions

class ParseUnaryTests
{
	string test_group
	ContractTestHelper runner

	ctor() {
		test_group = "parse_unary"
	}
	
	begin(string name) runner.begin(name)
	assert(bool condition) runner.assert(condition)
	
	test(ContractTestHelper test_runner) {
		runner = test_runner
		
		begin("fails on ''")
		ParseExpressionResult result = parse_unary(new Lexer(""))
		assert(result.success == false)
		
		passes("-123", negate(numerical(123)))
		passes("-abc", negate(identifier("abc")))
		passes("!true", not(identifier("true")))
		
		passes("123", numerical(123))
		passes("true", identifier("true"))
	}
	
	passes(string input, Expression tree) {
		begin("passes on '{input}'")
		ParseExpressionResult result = parse_unary(new Lexer(input))
		assert(result.success == true)
		assert(result.expression.equals(tree))
	}
}