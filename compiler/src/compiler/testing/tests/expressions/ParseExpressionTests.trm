use compiler
use compiler.testing
use compiler.lexer
use compiler.parser
use compiler.parser.expressions

class ParseExpressionTests
{
	string test_group
	ContractTestHelper runner

	ctor() {
		test_group = "parse_expression"
	}
	
	begin(string name) runner.begin(name)
	assert(bool condition) runner.assert(condition)
	
	test(ContractTestHelper test_runner) {
		runner = test_runner
		
		begin("fails on ''")
		ParseExpressionResult result = parse_expression(new Lexer(""))
		assert(result.success == false)
		
		begin("fails on invalid expression \{")
		result = parse_expression(new Lexer("\{"))
		assert(result.success == false)
		
		begin("passes on identifier")
		result = parse_expression(new Lexer("identifier"))
		assert(result.success == true)
		assert(result.expression.equals(
			identifier("identifier")
		))
		
		begin("passes on true")
		result = parse_expression(new Lexer("true"))
		assert(result.success == true)
		assert(result.expression.equals(
			identifier("true")
		))
		
		begin("passes on false")
		result = parse_expression(new Lexer("false"))
		assert(result.success == true)
		assert(result.expression.equals(
			identifier("false")
		))
		
		begin("passes on whole number")
		result = parse_expression(new Lexer("123"))
		assert(result.success == true)
		assert(result.expression.equals(
			numerical(123)
		))
		
		begin("passes on negative whole number")
		result = parse_expression(new Lexer("-123"))
		assert(result.success == true)
		assert(result.expression.equals(
			negate(numerical(123))
		))
		
		begin("passes on decimal")
		result = parse_expression(new Lexer("123.456"))
		assert(result.success == true)
		
		begin("passes on negative decimal")
		result = parse_expression(new Lexer("-123.456"))
		assert(result.success == true)
		
		begin("passes on identifier member access")
		result = parse_expression(new Lexer("identifier.another_identifier"))
		assert(result.success == true)
		assert(result.expression.equals(
			member_access(identifier("identifier"), identifier("another_identifier"))
		))
		
		begin("passes on = assignment")
		result = parse_expression(new Lexer("identifier = 123"))
		assert(result.success == true)
		assert(result.expression.equals(
			assignment(
				identifier("identifier"),
				numerical(123)
			)
		))
		
		begin("passes on member access = assignment")
		result = parse_expression(new Lexer("identifier.another = 123"))
		assert(result.success == true)
		assert(result.expression.equals(
			assignment(
				member_access(
					identifier("identifier"),
					identifier("another")
				),
				numerical(123)
			)
		))
		
		begin("passes on += assignment")
		result = parse_expression(new Lexer("identifier += 123"))
		assert(result.success == true)
		assert(result.expression.equals(
			assignment_add(
				identifier("identifier"),
				numerical(123)
			)
		))
		
		begin("passes on member access += assignment")
		result = parse_expression(new Lexer("identifier.another += 123"))
		assert(result.success == true)
		assert(result.expression.equals(
			assignment_add(
				member_access(
					identifier("identifier"),
					identifier("another")
				),
				numerical(123)
			)
		))
		
		begin("passes on -= assignment")
		result = parse_expression(new Lexer("identifier -= 123"))
		assert(result.success == true)
		assert(result.expression.equals(
			assignment_subtract(
				identifier("identifier"),
				numerical(123)
			)
		))
		
		begin("passes on member access -= assignment")
		result = parse_expression(new Lexer("identifier.another -= 123"))
		assert(result.success == true)
		assert(result.expression.equals(
			assignment_subtract(
				member_access(
					identifier("identifier"),
					identifier("another")
				),
				numerical(123)
			)
		))
		
		begin("passes on addition")
		result = parse_expression(new Lexer("1 + 2"))
		assert(result.success == true)
		assert(result.expression.equals(
			addition(
				numerical(1),
				numerical(2)
			)
		))
		
		begin("passes on subtraction")
		result = parse_expression(new Lexer("1 - 2"))
		assert(result.success == true)
		assert(result.expression.equals(
			subtraction(
				numerical(1),
				numerical(2)
			)
		))
		
		begin("passes on multiplication")
		result = parse_expression(new Lexer("1 * 2"))
		assert(result.success == true)
		assert(result.expression.equals(
			multiplication(
				numerical(1),
				numerical(2)
			)
		))
		
		begin("passes on division")
		result = parse_expression(new Lexer("1 / 2"))
		assert(result.success == true)
		assert(result.expression.equals(
			division(
				numerical(1),
				numerical(2)
			)
		))
		
		begin("passes on modulus")
		result = parse_expression(new Lexer("1 % 2"))
		assert(result.success == true)
		assert(result.expression.equals(
			modulous(
				numerical(1),
				numerical(2)
			)
		))
		
		begin("parses math in right precedence order")
		result = parse_expression(new Lexer("1 + 2 - 3 * 4 / 5 + 2 / 5 - 8 * 11"))
		assert(result.success == true)
		assert(result.expression.equals(
			subtraction(
				addition(
					subtraction(
						addition(
							numerical(1),
							numerical(2)
						),
						division(
							multiplication(
								numerical(3),
								numerical(4)
							),
							numerical(5)
						)
					),
					division(
						numerical(2),
						numerical(5)
					)
				),
				multiplication(
					numerical(8),
					numerical(11)
				)
			)
		))
		
		begin("parses equal to ==")
		result = parse_expression(new Lexer("true == true"))
		assert(result.success == true)
		assert(result.expression.equals(
			equals(identifier("true"), identifier("true"))
		))
		
		begin("parses not equal to !=")
		result = parse_expression(new Lexer("true != false"))
		assert(result.success == true)
		assert(result.expression.equals(
			not_equals(identifier("true"), identifier("false"))
		))
		
		begin("parses not !")
		result = parse_expression(new Lexer("!true"))
		assert(result.success == true)
		assert(result.expression.equals(
			negate(identifier("true"))
		))
		
		begin("parses and &&")
		result = parse_expression(new Lexer("true && true"))
		assert(result.success == true)
		assert(result.expression.equals(
			and(identifier("true"), identifier("true"))
		))
		
		begin("parses or ||")
		result = parse_expression(new Lexer("false || true"))
		assert(result.success == true)
		assert(result.expression.equals(
			or(identifier("false"), identifier("true"))
		))
		
		begin("parses equality in right precedence order")
		result = parse_expression(new Lexer("true && false || true == false && true == false || false || true && false == true || false"))
		assert(result.success == true)
		assert(result.expression.equals(
			or(
				or(
					or(
						or(
							and(
								identifier("true"),
								identifier("false")
							),
							and(
								equals(
									identifier("true"),
									identifier("false")
								),
								equals(
									identifier("true"),
									identifier("false")
								)
							)
						),
						identifier("false")
					),
					and(
						identifier("true"),
						equals(
							identifier("false"),
							identifier("true")
						)
					)
				),
				identifier("false")
			)
		))
		
		begin("parses parenthetical expression 1")
		result = parse_expression(new Lexer("(1)"))
		assert(result.success == true)
		assert(result.expression.equals(
			parenthetical(numerical(1))
		))
		
		begin("parses parenthetical expression true")
		result = parse_expression(new Lexer("(true)"))
		assert(result.success == true)
		assert(result.expression.equals(
			parenthetical(identifier("true"))
		))
		
		begin("parses parenthetical expression before non parenthetical expressions")
		result = parse_expression(new Lexer("true && (false == true) || (!false == (!true && false))"))
		// (true && (false == true)) || (!false == (!true && false))
		assert(result.success == true)
		assert(result.expression.equals(
			or(
				and(
					identifier("true"),
					parenthetical(
						equals(
							identifier("false"),
							identifier("true")
						)
					)
				),
				parenthetical(
					equals(
						not(identifier("false")),
						parenthetical(
							and(
								not(identifier("true")),
								identifier("false")
							)
						)
					)
				)
			)
		))
		
		begin("parses function call")
		result = parse_expression(new Lexer("my_function_call<T>(1, true, 8 < 7)"))
		
		assert(result.success == true)
		
		LinkedParsedTypeList parsed_type_list = new LinkedParsedTypeList()
		parsed_type_list.add(new ParsedType(false, false, new LinkedParsedTypeList(), new Text("T")))
		
		LinkedExpressionList expression_list = new LinkedExpressionList()
		expression_list.add(numerical(1))
		expression_list.add(identifier("true"))
		expression_list.add(less_than(numerical(8), numerical(7)))
		
		@println("asserting equal")
		assert(result.expression.equals(
			function_call(
				"my_function_call",
				parsed_type_list,
				expression_list
			)
		))
	}
}