use std
use compiler.testing
use compiler.lexer
use compiler.parser.expressions

class ParseParentheticalTests
{
	string test_group
	ContractTestHelper runner

	ctor() {
		test_group = "parse_parenthetical"
	}
	
	begin(string name) runner.begin(name)
	assert(bool condition) runner.assert(condition)
	
	test(ContractTestHelper test_runner) {
		runner = test_runner
		
		begin("fails on ''")
		ParseExpressionResult result = parse_parenthetical(new Lexer(""))
		assert(result.success == false)
		
		begin("fails on '(1'")
		result = parse_parenthetical(new Lexer("(1"))
		assert(result.success == false)
		
		passes("(1)", parenthetical(numerical(1)))
		passes("((2))", parenthetical(parenthetical(numerical(2))))
	}
	
	passes(string input, Expression tree) {
		begin("passes on '{input}'")
		ParseExpressionResult result = parse_parenthetical(new Lexer(input))
		assert(result.success == true)
		assert(result.expression.equals(tree))
	}
}