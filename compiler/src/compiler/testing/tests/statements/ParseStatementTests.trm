use compiler.testing
use compiler.lexer
use compiler.parser
use compiler.parser.expressions
use compiler.parser.statements

class ParseStatementTests
{
	string test_group
	ContractTestHelper runner

	ctor() {
		test_group = "parse_statement"
	}
	
	begin(string name) runner.begin(name)
	assert(bool condition) runner.assert(condition)
	
	test(ContractTestHelper test_runner) {
		runner = test_runner
		
		begin("fails on ''")
		ParseStatementResult result = parse_statement(new Lexer(""))
		assert(result.success == false)
		
		// even though it's illegal, it's parseable
		begin("passes on assigning to function call")
		result = parse_statement(new Lexer("nested.left_hand() = right()"))
		assert(result.success == true)
		
		begin("passes on return")
		result = parse_statement(new Lexer("return 1"))
		assert(result.success == true)
		assert(result.statement.equals(
			statement_return(
				numerical(1)
			)
		))
		
		begin("passes on assignment")
		result = parse_statement(new Lexer("left = right"))
		assert(result.success == true)
		
		begin("passes on nested assignment")
		result = parse_statement(new Lexer("nested.left_hand.side = right"))
		assert(result.success == true)
		
		begin("passes on nested assignment with call")
		result = parse_statement(new Lexer("nested.left_hand().side = right"))
		assert(result.success == true)
		
		begin("passes on empty collection")
		result = parse_statement(new Lexer("\{\}"))
		assert(result.success == true)
		
		begin("passes on if statement")
		result = parse_statement(new Lexer("if (true) \{\}"))
		assert(result.success == true)
		
		begin("passes on if statement and return")
		result = parse_statement(new Lexer("if (true) return 1"))
		assert(result.success == true)
		
		begin("passes on if statement and return and else")
		result = parse_statement(new Lexer("if (true)
	return 1
else
	return 2"))
		assert(result.success == true)
		assert(result.statement.equals(
			statement_if_else(
				parenthetical(identifier("true")),
				statement_return(numerical(1)),
				statement_return(numerical(2))
			)
		))
		
		begin("passes on while")
		result = parse_statement(new Lexer("while (true) \{\}"))
		assert(result.success == true)
		
		begin("passes on do while")
		result = parse_statement(new Lexer("do \{\} while (true)"))
		assert(result.success == true)
	}
}