use std
use terumi
use compiler.testing.tests

run_tests()
{
	println("
[Terumi Compiler Tests]

The Terumi Compiler tests as much of its code as it can, at runtime, when you
run it. The reason tests are ran not at compile time, is because there is no
infrastructure setup.

If you're seeing this message, chances are, you explicitly enabled testing - or
the project is still in its infancy.
")

	Runner runner = new Runner()
	runner.self = runner
	
	runner.run(new MetaTests())
	runner.run(new StringTests())
	runner.run(new TextTests())
	runner.run(new LexerTests())
	runner.run(new TokenTests())
}

class TestInfo
{
	string test_name
	number assertions
	bool failed

	ctor(string param_test_name) {
		test_name = param_test_name
		assertions = 0
		failed = false
	}
}

class TestSection
{
	ctor() {
	}
	
	begin(string test) {
		
	}
}

class Runner
{
	Runner self
	
	// _test-info is in another class because otherwise the compiler errors out
	TestInfo _test_info
	
	// these two are used to auto call begin()/done() for the test methods
	bool _called_begin
	bool _called_done
	
	ctor() {
		_called_begin = false
		_called_done = false
	}
	
	run(ContractTestable suite) {
		println("[{suite.test_group}]")
		suite.test(self)
		done()
	}
	
	begin(string test_name) {
		if (_called_begin) if (!_called_done) done()
		
		_called_begin = true
		_called_done = false
	
		_test_info = new TestInfo(test_name)
	}
	
	assert(bool condition) {
		if (!_test_info.failed) {
			_test_info.assertions = _test_info.assertions + 1
		}
		
		if (!condition) {
			_test_info.failed = true
		}
	}
	
	done() {
		_called_done = true
		@println("{_tab_or_failed(_test_info.failed)}{_test_info.test_name} - {_bool_to_passed_or_not(_test_info.failed)}, {_info_assertions()}")
	}
	
	string _info_assertions() {
		if (_test_info.failed) {
			return "failed on assertion {to_string(_test_info.assertions)}"
		}
		
		return "{to_string(_test_info.assertions)} assertions"
	}
}

string _bool_to_passed_or_not(bool failed) {
	if (!failed) return "passed"
	return "FAILED"
}

string _tab_or_failed(bool failed) {
	if (failed) {
		return "X	"
	}

	return "	"
}

class ContractTestHelper
{
	begin(string name) @panic("Contract 'ContractTestHelper' may not be used.")
	assert(bool condition) @panic("Contract 'ContractTestHelper' may not be used.")
	done() @panic("Contract 'ContractTestHelper' may not be used.")
}

class ContractTestable
{
	string test_group

	test(ContractTestHelper test_runner) @panic("Contract 'ContractTestable' may not be used.")
}